---
import Layout from '../layouts/Layout.astro';
---

<Layout title="Tempo365">
  <section style="text-align:center; padding: 60px 20px; font-family: Arial, sans-serif;">
    <h1 style="font-size: 2.5rem; color: #0077cc;">‚òÄÔ∏è Bem-vindo ao Tempo365</h1>
    <p style="font-size: 1.2rem; margin-top: 20px;">
      Consulta a previs√£o do tempo em qualquer lugar, 24 horas por dia.
    </p>

    <p style="margin-top: 30px;">
      Website criado com <strong>Astro</strong> e publicado no <strong>Netlify</strong>.
    </p>

    <img src="/favicon.ico" alt="Tempo365 logo" style="margin-top: 40px; width: 120px;" />
  </section>
</Layout>

<script>
  async function carregarTempo() {
    try {
      const resposta = await fetch("https://api.open-meteo.com/v1/forecast?latitude=38.72&longitude=-9.14&current_weather=true");
      const dados = await resposta.json();
      const tempo = dados.current_weather;
      document.body.innerHTML += `
        <section style="text-align:center; background:white; color:#333; padding:40px 20px; font-size:1.2rem;">
          <h2>Previs√£o Meteorol√≥gica</h2>
          üå°Ô∏è Temperatura: ${tempo.temperature}¬∞C<br>
          üí® Vento: ${tempo.windspeed} km/h
        </section>
      `;
    } catch (erro) {
      console.error("Erro ao carregar previs√£o:", erro);
    }
  }

  carregarTempo();
</script>

<script>
  async function carregarTempo() {
    const elemento = document.createElement("section");
    elemento.style = "text-align:center; background:white; color:#333; padding:40px 20px; font-size:1.2rem;";
    elemento.innerHTML = "<h2>Previs√£o Meteorol√≥gica</h2> A obter localiza√ß√£o...";
    document.body.appendChild(elemento);

    // 1Ô∏è‚É£ Obter a localiza√ß√£o atual do utilizador
    if (!navigator.geolocation) {
      elemento.innerHTML = "Geolocaliza√ß√£o n√£o suportada neste dispositivo.";
      return;
    }

    navigator.geolocation.getCurrentPosition(async (pos) => {
      const lat = pos.coords.latitude.toFixed(2);
      const lon = pos.coords.longitude.toFixed(2);

      // 2Ô∏è‚É£ Buscar o nome da cidade via API reversa
      const localResp = await fetch(`https://geocode.maps.co/reverse?lat=${lat}&lon=${lon}`);
      const localData = await localResp.json();
      const cidade = localData.address?.city || localData.address?.town || localData.address?.village || "Localiza√ß√£o desconhecida";

      // 3Ô∏è‚É£ Buscar dados meteorol√≥gicos
      const resposta = await fetch(`https://api.open-meteo.com/v1/forecast?latitude=${lat}&longitude=${lon}&current_weather=true`);
      const dados = await resposta.json();
      const tempo = dados.current_weather;

      // 4Ô∏è‚É£ Escolher √≠cone com base no c√≥digo do tempo
      let icone = "‚òÄÔ∏è";
      if (tempo.weathercode >= 45 && tempo.weathercode <= 48) icone = "üå´Ô∏è";
      else if (tempo.weathercode >= 51 && tempo.weathercode <= 67) icone = "üå¶Ô∏è";
      else if (tempo.weathercode >= 71 && tempo.weathercode <= 77) icone = "‚ùÑÔ∏è";
      else if (tempo.weathercode >= 80 && tempo.weathercode <= 99) icone = "üåßÔ∏è";

      // 5Ô∏è‚É£ Mostrar previs√£o no ecr√£
      elemento.innerHTML = `
        <h2>Previs√£o Meteorol√≥gica</h2>
        üìç <strong>${cidade}</strong><br><br>
        ${icone} <strong>${tempo.temperature}¬∞C</strong><br>
        üí® Vento: ${tempo.windspeed} km/h
      `;
    }, (erro) => {
      elemento.innerHTML = "‚ö†Ô∏è N√£o foi poss√≠vel obter a localiza√ß√£o.";
    });
  }

  carregarTempo();
</script>

<script>
  async function carregarTempo() {
    const elemento = document.getElementById("secao-tempo");
    elemento.innerHTML = "<h2>Previs√£o Meteorol√≥gica</h2> A obter localiza√ß√£o...";

    if (!navigator.geolocation) {
      elemento.innerHTML = "Geolocaliza√ß√£o n√£o suportada neste dispositivo.";
      return;
    }

    navigator.geolocation.getCurrentPosition(async (pos) => {
      const lat = pos.coords.latitude.toFixed(2);
      const lon = pos.coords.longitude.toFixed(2);

      try {
        // Buscar nome da cidade
        const localResp = await fetch(`https://geocode.maps.co/reverse?lat=${lat}&lon=${lon}`);
        const localData = await localResp.json();
        const cidade = localData.address?.city || localData.address?.town || localData.address?.village || "Localiza√ß√£o desconhecida";

        // Buscar dados meteorol√≥gicos
        const resposta = await fetch(`https://api.open-meteo.com/v1/forecast?latitude=${lat}&longitude=${lon}&current_weather=true`);
        const dados = await resposta.json();
        const tempo = dados.current_weather;

        // Escolher √≠cone
        let icone = "‚òÄÔ∏è";
        if (tempo.weathercode >= 45 && tempo.weathercode <= 48) icone = "üå´Ô∏è";
        else if (tempo.weathercode >= 51 && tempo.weathercode <= 67) icone = "üå¶Ô∏è";
        else if (tempo.weathercode >= 71 && tempo.weathercode <= 77) icone = "‚ùÑÔ∏è";
        else if (tempo.weathercode >= 80 && tempo.weathercode <= 99) icone = "üåßÔ∏è";

        // Mostrar previs√£o
        elemento.innerHTML = `
          <h2>Previs√£o Meteorol√≥gica</h2>
          üìç <strong>${cidade}</strong><br><br>
          ${icone} <strong>${tempo.temperature}¬∞C</strong><br>
          üí® Vento: ${tempo.windspeed} km/h<br><br>
          <button id="atualizar" style="margin-top:15px; padding:10px 20px; border:none; background:#0077cc; color:white; border-radius:8px; font-size:1rem; cursor:pointer;">
            üîÑ Atualizar previs√£o
          </button>
        `;

        // Ligar evento ao bot√£o
        document.getElementById("atualizar").addEventListener("click", carregarTempo);
      } catch (erro) {
        elemento.innerHTML = "‚ö†Ô∏è Erro ao obter previs√£o meteorol√≥gica.";
      }
    }, (erro) => {
      elemento.innerHTML = "‚ö†Ô∏è N√£o foi poss√≠vel obter a localiza√ß√£o.";
    });
  }

  // Criar a sec√ß√£o no corpo da p√°gina
  const secao = document.createElement("section");
  secao.id = "secao-tempo";
  secao.style = "text-align:center; background:white; color:#333; padding:40px 20px; font-size:1.2rem;";
  secao.innerHTML = "<h2>Previs√£o Meteorol√≥gica</h2>";
  document.body.appendChild(secao);

  carregarTempo();
</script>

<script>
  async function carregarTempo() {
    const elemento = document.getElementById("secao-tempo");
    elemento.innerHTML = "<h2>Previs√£o Meteorol√≥gica</h2> ‚òÅÔ∏è A obter localiza√ß√£o...";

    if (!navigator.geolocation) {
      elemento.innerHTML = "‚ö†Ô∏è Geolocaliza√ß√£o n√£o suportada neste dispositivo.";
      return;
    }

    navigator.geolocation.getCurrentPosition(async (pos) => {
      const lat = pos.coords.latitude.toFixed(2);
      const lon = pos.coords.longitude.toFixed(2);

      try {
        // Buscar nome da cidade
        const localResp = await fetch(`https://geocode.maps.co/reverse?lat=${lat}&lon=${lon}`);
        const localData = await localResp.json();
        const cidade = localData.address?.city || localData.address?.town || localData.address?.village || "Localiza√ß√£o desconhecida";

        // Buscar dados meteorol√≥gicos
        const resposta = await fetch(`https://api.open-meteo.com/v1/forecast?latitude=${lat}&longitude=${lon}&current_weather=true`);
        const dados = await resposta.json();
        const tempo = dados.current_weather;

        // Escolher √≠cone e anima√ß√£o
        let icone = "‚òÄÔ∏è";
        let animacao = `
          <div class="anim-sol"></div>
        `;
        if (tempo.weathercode >= 45 && tempo.weathercode <= 48) {
          icone = "üå´Ô∏è";
          animacao = `<div class="anim-nevoa"></div>`;
        } else if (tempo.weathercode >= 51 && tempo.weathercode <= 67) {
          icone = "üå¶Ô∏è";
          animacao = `<div class="anim-chuva"></div>`;
        } else if (tempo.weathercode >= 71 && tempo.weathercode <= 77) {
          icone = "‚ùÑÔ∏è";
          animacao = `<div class="anim-neve"></div>`;
        } else if (tempo.weathercode >= 80 && tempo.weathercode <= 99) {
          icone = "üåßÔ∏è";
          animacao = `<div class="anim-chuva"></div>`;
        }

        // Mostrar previs√£o
        elemento.innerHTML = `
          <h2>Previs√£o Meteorol√≥gica</h2>
          <div style="font-size:2.5rem; margin-bottom:10px;">${icone}</div>
          ${animacao}
          <p>üìç <strong>${cidade}</strong></p>
          <p><strong>${tempo.temperature}¬∞C</strong></p>
          <p>üí® ${tempo.windspeed} km/h</p>
          <button id="atualizar" style="margin-top:15px; padding:10px 20px; border:none; background:#0077cc; color:white; border-radius:8px; font-size:1rem; cursor:pointer;">
            üîÑ Atualizar previs√£o
          </button>
        `;

        document.getElementById("atualizar").addEventListener("click", carregarTempo);
      } catch (erro) {
        elemento.innerHTML = "‚ö†Ô∏è Erro ao obter previs√£o meteorol√≥gica.";
      }
    }, () => {
      elemento.innerHTML = "‚ö†Ô∏è N√£o foi poss√≠vel obter a localiza√ß√£o.";
    });
  }

  // Criar a sec√ß√£o
  const secao = document.createElement("section");
  secao.id = "secao-tempo";
  secao.style = "text-align:center; background:white; color:#333; padding:40px 20px; font-size:1.2rem; min-height: 70vh; position: relative; overflow: hidden;";
  secao.innerHTML = "<h2>Previs√£o Meteorol√≥gica</h2>";
  document.body.appendChild(secao);

  // Adicionar estilos animados
  const estilo = document.createElement("style");
  estilo.innerHTML = `
    .anim-sol {
      width: 100px;
      height: 100px;
      border-radius: 50%;
      background: radial-gradient(circle, #FFD93D 60%, #FFA500 100%);
      margin: 20px auto;
      animation: girar 12s linear infinite;
    }
    @keyframes girar {
      from { transform: rotate(0deg); }
      to { transform: rotate(360deg); }
    }
    .anim-chuva::before {
      content: 'üíßüíßüíß';
      font-size: 2rem;
      display: block;
      animation: cair 1s infinite;
    }
    @keyframes cair {
      0% { opacity: 0; transform: translateY(-10px); }
      100% { opacity: 1; transform: translateY(10px); }
    }
    .anim-nevoa::before {
      content: '„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è';
      font-size: 2rem;
      display: block;
      animation: mover 2s infinite alternate;
    }
    @keyframes mover {
      from { opacity: 0.6; transform: translateX(-10px); }
      to { opacity: 1; transform: translateX(10px); }
    }
    .anim-neve::before {
      content: '‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è';
      font-size: 2rem;
      display: block;
      animation: cairNeve 2s infinite;
    }
    @keyframes cairNeve {
      0% { opacity: 0.7; transform: translateY(-10px); }
      100% { opacity: 1; transform: translateY(10px); }
    }
  `;
  document.head.appendChild(estilo);

  carregarTempo();
</script>
<script>
  async function carregarTempo() {
    const elemento = document.getElementById("secao-tempo");
    elemento.innerHTML = "<h2>Previs√£o Meteorol√≥gica</h2> ‚òÅÔ∏è A obter localiza√ß√£o...";

    if (!navigator.geolocation) {
      elemento.innerHTML = "‚ö†Ô∏è Geolocaliza√ß√£o n√£o suportada neste dispositivo.";
      return;
    }

    navigator.geolocation.getCurrentPosition(async (pos) => {
      const lat = pos.coords.latitude.toFixed(2);
      const lon = pos.coords.longitude.toFixed(2);

      try {
        // Buscar nome da cidade
        const localResp = await fetch(`https://geocode.maps.co/reverse?lat=${lat}&lon=${lon}`);
        const localData = await localResp.json();
        const cidade = localData.address?.city || localData.address?.town || localData.address?.village || "Localiza√ß√£o desconhecida";

        // Buscar dados meteorol√≥gicos
        const resposta = await fetch(`https://api.open-meteo.com/v1/forecast?latitude=${lat}&longitude=${lon}&current_weather=true`);
        const dados = await resposta.json();
        const tempo = dados.current_weather;

        // Determinar hora local
        const hora = new Date().getHours();
        const eNoite = hora >= 19 || hora < 7;

        // Escolher √≠cone e anima√ß√£o conforme o tempo
        let icone = eNoite ? "üåô" : "‚òÄÔ∏è";
        let animacao = eNoite ? `<div class="anim-lua"></div>` : `<div class="anim-sol"></div>`;

        if (tempo.weathercode >= 45 && tempo.weathercode <= 48) {
          icone = eNoite ? "üå´Ô∏è" : "üå´Ô∏è";
          animacao = `<div class="anim-nevoa"></div>`;
        } else if (tempo.weathercode >= 51 && tempo.weathercode <= 67) {
          icone = eNoite ? "üåßÔ∏è" : "üå¶Ô∏è";
          animacao = `<div class="anim-chuva"></div>`;
        } else if (tempo.weathercode >= 71 && tempo.weathercode <= 77) {
          icone = "‚ùÑÔ∏è";
          animacao = `<div class="anim-neve"></div>`;
        } else if (tempo.weathercode >= 80 && tempo.weathercode <= 99) {
          icone = "üåßÔ∏è";
          animacao = `<div class="anim-chuva"></div>`;
        }

        // Ajustar tema conforme dia/noite
        document.body.style.background = eNoite
          ? "linear-gradient(180deg, #0b0c10, #1f2833)"
          : "linear-gradient(180deg, #0077cc, #00bfff)";
        document.body.style.color = eNoite ? "#f1f1f1" : "#333";

        // Mostrar previs√£o
        elemento.innerHTML = `
          <h2>Previs√£o Meteorol√≥gica</h2>
          <div style="font-size:2.5rem; margin-bottom:10px;">${icone}</div>
          ${animacao}
          <p>üìç <strong>${cidade}</strong></p>
          <p><strong>${tempo.temperature}¬∞C</strong></p>
          <p>üí® ${tempo.windspeed} km/h</p>
          <button id="atualizar" style="margin-top:15px; padding:10px 20px; border:none; background:#0077cc; color:white; border-radius:8px; font-size:1rem; cursor:pointer;">
            üîÑ Atualizar previs√£o
          </button>
        `;

        // Evento do bot√£o
        document.getElementById("atualizar").addEventListener("click", carregarTempo);
      } catch (erro) {
        elemento.innerHTML = "‚ö†Ô∏è Erro ao obter previs√£o meteorol√≥gica.";
      }
    }, () => {
      elemento.innerHTML = "‚ö†Ô∏è N√£o foi poss√≠vel obter a localiza√ß√£o.";
    });
  }

  // Criar a sec√ß√£o
  const secao = document.createElement("section");
  secao.id = "secao-tempo";
  secao.style = "text-align:center; padding:40px 20px; font-size:1.2rem; min-height: 70vh; position: relative; overflow: hidden;";
  secao.innerHTML = "<h2>Previs√£o Meteorol√≥gica</h2>";
  document.body.appendChild(secao);

  // Estilos animados
  const estilo = document.createElement("style");
  estilo.innerHTML = `
    .anim-sol {
      width: 100px;
      height: 100px;
      border-radius: 50%;
      background: radial-gradient(circle, #FFD93D 60%, #FFA500 100%);
      margin: 20px auto;
      animation: girar 12s linear infinite;
    }
    .anim-lua {
      width: 80px;
      height: 80px;
      background: radial-gradient(circle at 25% 25%, #f5f3ce 60%, #d6d4a0 100%);
      border-radius: 50%;
      margin: 20px auto;
      box-shadow: -10px 0 0 0 #0b0c10;
      animation: balancar 6s ease-in-out infinite alternate;
    }
    @keyframes girar {
      from { transform: rotate(0deg); }
      to { transform: rotate(360deg); }
    }
    @keyframes balancar {
      from { transform: translateY(-5px); }
      to { transform: translateY(5px); }
    }
    .anim-chuva::before {
      content: 'üíßüíßüíß';
      font-size: 2rem;
      display: block;
      animation: cair 1s infinite;
    }
    @keyframes cair {
      0% { opacity: 0; transform: translateY(-10px); }
      100% { opacity: 1; transform: translateY(10px); }
    }
    .anim-nevoa::before {
      content: '„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è';
      font-size: 2rem;
      display: block;
      animation: mover 2s infinite alternate;
    }
    @keyframes mover {
      from { opacity: 0.6; transform: translateX(-10px); }
      to { opacity: 1; transform: translateX(10px); }
    }
    .anim-neve::before {
      content: '‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è';
      font-size: 2rem;
      display: block;
      animation: cairNeve 2s infinite;
    }

    @keyframes cairNeve {
      0% { opacity: 0.7; transform: translateY(-10px); }
      100% { opacity: 1; transform: translateY(10px); }
    }
  `;
  document.head.appendChild(estilo);

  carregarTempo();
</script>
<script>
  async function carregarTempo() {
    const elemento = document.getElementById("secao-tempo");
    elemento.innerHTML = "<h2>Previs√£o Meteorol√≥gica</h2> ‚òÅÔ∏è A obter localiza√ß√£o...";

    if (!navigator.geolocation) {
      elemento.innerHTML = "‚ö†Ô∏è Geolocaliza√ß√£o n√£o suportada neste dispositivo.";
      return;
    }

    navigator.geolocation.getCurrentPosition(async (pos) => {
      const lat = pos.coords.latitude.toFixed(2);
      const lon = pos.coords.longitude.toFixed(2);

      try {
        // Buscar nome da cidade
        const localResp = await fetch(`https://geocode.maps.co/reverse?lat=${lat}&lon=${lon}`);
        const localData = await localResp.json();
        const cidade = localData.address?.city || localData.address?.town || localData.address?.village || "Localiza√ß√£o desconhecida";

        // Buscar dados meteorol√≥gicos
        const resposta = await fetch(`https://api.open-meteo.com/v1/forecast?latitude=${lat}&longitude=${lon}&current_weather=true`);
        const dados = await resposta.json();
        const tempo = dados.current_weather;

        // Determinar hora local
        const hora = new Date().getHours();
        const eNoite = hora >= 19 || hora < 7;

        // Escolher √≠cone e anima√ß√£o conforme o tempo
        let icone = eNoite ? "üåô" : "‚òÄÔ∏è";
        let animacao = eNoite ? `<div class="anim-lua"></div>` : `<div class="anim-sol"></div>`;

        if (tempo.weathercode >= 45 && tempo.weathercode <= 48) {
          icone = "üå´Ô∏è";
          animacao = `<div class="anim-nevoa"></div>`;
        } else if (tempo.weathercode >= 51 && tempo.weathercode <= 67) {
          icone = "üå¶Ô∏è";
          animacao = `<div class="anim-chuva"></div>`;
        } else if (tempo.weathercode >= 71 && tempo.weathercode <= 77) {
          icone = "‚ùÑÔ∏è";
          animacao = `<div class="anim-neve"></div>`;
        } else if (tempo.weathercode >= 80 && tempo.weathercode <= 99) {
          icone = "üåßÔ∏è";
          animacao = `<div class="anim-chuva"></div>`;
        }

        // Tema com transi√ß√£o suave
        const fundo = eNoite
          ? "linear-gradient(180deg, #0b0c10, #1f2833)"
          : "linear-gradient(180deg, #0077cc, #00bfff)";
        const corTexto = eNoite ? "#f1f1f1" : "#222";

        document.body.style.transition = "background 2s ease, color 2s ease";
        document.body.style.background = fundo;
        document.body.style.color = corTexto;

        // Mostrar previs√£o
        elemento.innerHTML = `
          <h2>Previs√£o Meteorol√≥gica</h2>
          <div style="font-size:2.5rem; margin-bottom:10px;">${icone}</div>
          ${animacao}
          <p>üìç <strong>${cidade}</strong></p>
          <p><strong>${tempo.temperature}¬∞C</strong></p>
          <p>üí® ${tempo.windspeed} km/h</p>
          <button id="atualizar" style="margin-top:15px; padding:10px 20px; border:none; background:#0077cc; color:white; border-radius:8px; font-size:1rem; cursor:pointer;">
            üîÑ Atualizar previs√£o
          </button>
        `;

        document.getElementById("atualizar").addEventListener("click", carregarTempo);
      } catch (erro) {
        elemento.innerHTML = "‚ö†Ô∏è Erro ao obter previs√£o meteorol√≥gica.";
      }
    }, () => {
      elemento.innerHTML = "‚ö†Ô∏è N√£o foi poss√≠vel obter a localiza√ß√£o.";
    });
  }

  // Criar sec√ß√£o
  const secao = document.createElement("section");
  secao.id = "secao-tempo";
  secao.style = "text-align:center; padding:40px 20px; font-size:1.2rem; min-height: 70vh; position: relative; overflow: hidden;";
  secao.innerHTML = "<h2>Previs√£o Meteorol√≥gica</h2>";
  document.body.appendChild(secao);

  // Estilos animados
  const estilo = document.createElement("style");
  estilo.innerHTML = `
    .anim-sol {
      width: 100px;
      height: 100px;
      border-radius: 50%;
      background: radial-gradient(circle, #FFD93D 60%, #FFA500 100%);
      margin: 20px auto;
      animation: girar 12s linear infinite;
      box-shadow: 0 0 30px rgba(255,200,0,0.5);
    }
    .anim-lua {
      width: 80px;
      height: 80px;
      background: radial-gradient(circle at 25% 25%, #f5f3ce 60%, #d6d4a0 100%);
      border-radius: 50%;
      margin: 20px auto;
      box-shadow: -10px 0 0 0 #0b0c10;
      animation: balancar 6s ease-in-out infinite alternate;
    }
    @keyframes girar {
      from { transform: rotate(0deg); }
      to { transform: rotate(360deg); }
    }
    @keyframes balancar {
      from { transform: translateY(-5px); }
      to { transform: translateY(5px); }
    }
    .anim-chuva::before {
      content: 'üíßüíßüíß';
      font-size: 2rem;
      display: block;
      animation: cair 1s infinite;
    }
    @keyframes cair {
      0% { opacity: 0; transform: translateY(-10px); }
      100% { opacity: 1; transform: translateY(10px); }
    }
    .anim-nevoa::before {
      content: '„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è';
      font-size: 2rem;
      display: block;
      animation: mover 2s infinite alternate;
    }
    @keyframes mover {
      from { opacity: 0.6; transform: translateX(-10px); }
      to { opacity: 1; transform: translateX(10px); }
    }
    .anim-neve::before {
      content: '‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è';
      font-size: 2rem;
      display: block;
      animation: cairNeve 2s infinite;
    }
    @keyframes cairNeve {
      0% { opacity: 0.7; transform: translateY(-10px); }
      100% { opacity: 1; transform: translateY(10px); }
    }
  `;
  document.head.appendChild(estilo);

  carregarTempo();
</script>
